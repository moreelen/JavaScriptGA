jQuery does DOM manipulation and AJAX for you so you don't have to worry.

Content Delivery Network
cdnjs.com
Way to reroute common content to other servers so it doesn't load from your tiny server.
Used for for example jQuery.js, lodash.js, express.js, normalize.css... etc.
jQuery.min.js gives you the readable version of jQuery.

Semver
7.82.5
Major.Minor.Patch
Patch - Fixed something timely. If you update it's very unlikely it will cause your site to break.
Minor - Changed functionality but shouldn't cause a break. Keep an eye on it just to make sure.
Major - Changed something fundamental and your old code is unlikely to work.

api.jquery.com
onload becomes just $(function(){ ... }); called onDOMReady function.
sizzle = use css in javascript to select elements.
Now we've selected. Next comes manipulation.
You can chain methods! When using jQuery, CHAIN LIKE A BITCH!!
Don't requery! Don't select the same thing multiple times. Use Caching!
Save a selection as a variable and call the variable.
Use a $ sign infront of the variable to remind yourself that you've already masured it.
var $myDiv = $(#myDiv);
$myDiv.show()...

add return false at the end of functions to keep things safe. It stops prevent default and event bubbling.
prevent default to stop the normal behaviour from happening.
bubbling is the code going back up the DOM telling everything else that it happened.

You can trigger things to happen in the console.
$('#id').trigger('click')

animate.css adds animations by just adding classes

jQuery plugins - call them in the .js file.
Add all the css at the beginning of html
Add the bottom of document add:
1. Include jQuery ONCE!
2. Plugin script
3. Your own script
Then execute in your js file.
(read the plugin docs and follow their instructions)

Bulma, Foundation
fontawesome.io 3 - don't use 4! icons
material.io

https://jmsherry.github.io/ajax-templating/
Add repeated content. Like the cookie cutter.
With ES6 you can do templating natively so you might not need to use handlebars anymore
handebarsjs.com
<dl><dt>Name</dt><dd>{{name}}</dd>... should sit somewhere at the bottom of the html
{{}} means data will come in here later. These are the holes
var source = $(#mytemplate).html() grabs the HTML
var template = Handlebars.complie(source) turns it into a function
var data = {title: "new html", body: "this is the template"} grabs the data
var html = template(data) puts the dat in the holes
insert into the page via $('#targetArea').html(html)

VIDEO
Script with our server code (server.js). Eg. what happens when we do a GET, POST, etc call.
Static file serving at the top to call the HTML. app.use(express.static('public'));
HTML with the form and a refresh button
A main.js has the ajax calls and binds it with the DOM.
ajax is exactly the same as postman. have method which is like GET, POST, etc.
GET is the default so can delete it
have context which grabs the body and scopes it to the part of the page (instantly plug in)
have url which is the url (is /cars or /memories)
Can pull the error handler outside of ajax as a function and put in errorHandler
into the fail() section.
Put ajax in function. Bind that button to the code.

Order of JavaScript code:
Variables, page elements, generated elements, helper functions, event bindings, executing order.
Do as few DOM operations as possible.

When using POST in jQuery: data: car (car is the object we created)

Delegated event
When you for example generate a button only after the page has loaded.
Then the event bindings don't work because they didn't exist on page load.
Delegated event listning binds an event to an item which already exists.
Then check if what was clicked inside it matches a selector.
Eg. $(''.delete-button').on('click.delete', function(){...})
but the delete button didn't exist and therefore it doesn't work
$($carsList /* check what existed when the page loaded */)
.on('click.delete', '.delete-button' /* then check the selector within */ , function(){...})
It tells carsList: hey if something bubbles past you check that it has the selector string...
Attach the _id to an HTML tag called data-id="' + cars._id + '".
In JavaScript you can then call up that data-id tag using .data('id').
If it was data-age="" then it would be .data('age').
So you can call up that id in the click with $(this).data('id').
