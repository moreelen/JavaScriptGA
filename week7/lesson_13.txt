S3 POCKETS
Your own personal CDN.
Put all your files in there so you can call that URL and don't have to host it on your server.

Now most of the control happens on the client side
since doing HTML request to the server is costly.

SPAs: The site loads synchronously first then the rest is asynchronous.
Ask the server for the first page then the rest is calculated on the client.

REACTive programming is about watching data.
I have a collection of things. When I press a button, change this collection of things.
It is constantly watching and then redraws the page for you.
You don't have to traverse the DOM to change bits one by one.

React belongs to Facebook
Angular is Google's
Vue.js - favourite
Backbone to monitor the data but otherwise is old

** Component-based architecture **
Break your HTML into separate files and call up the bits in the index.hbs
.hbs which is like PHP
You can move components about the page to change the layout.

** Virtual DOM **
(there used to be a shadow DOM)
Changing the DOM is costly. Think of a puzzle where you are trying to put in one puzzle piece at a time.
Batch the changes you want to make to the DOM.
Eg. create a list in memory with all the items and push in the entire list at once
Virtual DOM is an in memory DOM. Does all the calculations in memory.
Then you re-render and it pushes the whole thing into the real DOM.

reactjs.org
Written in normal JS.
Two libraries react.min.js and react-dom.min.js which actually pushes to the DOM.
Plain react can operate independent of the browser.
window.Reach and window.ReactDOM exist in the window.

State is the data that is watched.
this.state = {secondsElapsed: 0}

Then render.
render(){
return(
<div>SecondsElapsed {this.state.secondsElapsed}</div>
);
}

In between, change the state.
tick(){
this.setState((prevSTate) => ({
secondsElapsed: prevState.secondsElapsed + 1
}));
}

REACT notices that the state has changed and runs the render again.
Once it is used, it deletes the state data. Redux keeps an instance in memory.

Live Cycle Methods
They watch the life cycle of a compoent.
When it was born, when it is layed out, when it is written on the page for the first time,
when it is updated, when it is removed. You can call all these instances and do things to them.
eg. compenentDidMount() componentWillMount() componentDidntMount()

Separate the list to a separate component then each item into a separate component.
Useful way to find out where the errors are coming from sinc they are split up.

REACT detector - chrome extention.
INSPECTOR HAS REACT DETECTOR!!! And you can see all the components and all the things they are called.

Download node and git to the raspberry pi

Higher Order Components handle all the data and calculations.
Ordinary Components handle all the text and puts the values in the text.
Declare it <myComponent /> this is a JSX tag.

Props = properties
data that is passed into an element.
When state changes in parent, it might change the children and cause rerendering in children.
Info that the component needs to run.
eg.name="James"
dogAge={age*7}

State is the current data of that component.
It is internal and private. Each component should have its own state.
You are not passing states around.
When you pass states you use REDUX not REACT.

Props calculate in advance and put in.
State is the data of that particular thing that changes when interacted with.

Syntax for constructors and classes.
class Animal {
  constructor(){ // Instruction on how you create an Animal.

  }
  hello(){ // What an Animal can do.

  }
  goodbye(){

  }
}

When writing a constructor declare what it is and then you have to bind the functions to it.
super(props) // Pass the props to react.component.
this.state = {items: [], text: ''}; // Define the state
this.someMethod = this.someMethod.bind(this); // Makes sure you are talking about this object not another.

HASN'T BEEN MOUNTED YET HENCE HASN'T BEEN BUILT IN DOM
Do not do ajax code from componentWillMount() as the DOM hasn't been mounted yet.
Changing things here does not re-render
You are sorting out info here. set the state here. this.setState({ });

render pushes the JSX into the DOM.
Once you render you cannot set the state.

JSX is like HTML but it needs to be compiled.
Only takes in a single node / root element means you cannot do:
return(
<div>Hello</div>
<div>Bye</div> // you must delete one of these
)
You can do:
return(
<ul>
  <li></li>
</ul>
)
You cannot have hyphens in JSX.
HTML: <p data_age=''>...
JSX: <p dataAge= ...
Cannot type class like normal HTML. Have to type className.
To do on click operation do:
<button onClick={this.someMmethod}>

componentWillMount() { } look at all your data and find out how to manipulate it.

componentDidMount() { } it mounted therefore take other actions like AJAX calls.

https://developmentarc.gitbooks.io/react-indepth/content/life_cycle/introduction.html

Learn REACT router

react-starter-kit to start doing react. Run it and it writes out the files for you.
